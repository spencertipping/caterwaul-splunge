Splunge hierarchical ring charts | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
Splunge constructs hierarchical ring charts and provides forward and backward transformations that allow you to easily map user actions to logical data elements. Data is specified functionally, which
gives you a great deal of flexibility. In particular, it lets you (1) construct the data lazily (though the lazy process must be synchronous), (2) use custom rendering and hit detection, and (3) process
infinite data sets, provided that you use some heuristic such as minimum viewable area to limit the number of objects you try to render.

  Immutability and caching.
  Almost all Splunge objects are immutable by design. However, Splunge uses a lot of mutability under the hood to increase performance, usually by caching stuff. The rule is that any state changes in the
  data can't impact semantics. Also, any mutable state is stored as a field ending with an underscore. (By the way, some immutable state is also stored this way; see chart_ctor for an example.)

caterwaul.module('splunge', ':all', function ($) {
  $.splunge = wcapture [

Transformations.
Transformations act on dimensions and bounding boxes. They can modify space in any way that preserves basic rectangular properties. In addition to transforming things forwards, they must also provide
inverses. This allows externally-generated points such as mouse input to be mapped back through the transformation into logical space for event processing.

Splunge comes with three transformations. One, the arctangent transform, is used to visually compress data along an axis. The axis that it transforms is compressed from (-∞, ∞) to (-1, 1), and
monotonicity properties are preserved. Another is the cartesian_to_polar transform, which converts two axes into magnitude and angle and is suitable for turning bar charts into ring charts. The third is bounding,
which linearly transforms space such that some bounding box is mapped to the unit square. The typical nesting is x_arctangent(cartesian_to_polar(zoom(data))), where the zoom step changes with user input (see
"viewports").

Transformations provide two methods, transform(v) and inverse(). t.inverse().inverse().transform(v) should be equivalent to t.transform(v), though t.inverse().transform(t.transform(v)) might not be
equivalent to v in some cases.

Incidentally, the arctangent/tangent transforms normalize to (-1, 1) while the cartesian_to_polar coordinate transforms have Y components that vary from 0 to τ. This is deliberate. It's written this way
so that you can use the cartesian_to_polar coordinate output directly with the canvas context's arc() method, and so that if you're compressing space with the arctangent transform you can then do a
scale(x, x) transformation to make it fit inside a 2x by 2x box centered at the origin.

Infinity isn't really infinity. Instead, it's a number that corresponds to the reciprocal of the machine epsilon (FP rounding error). This means that "infinite" values can be worked with normally. See
http://en.wikipedia.org/wiki/Machine_epsilon for ways to compute it.

  tau     = Math.PI * 2,            atan_scale = 2 / Math.PI,  scaled_atan(x) = Math.atan(x) * atan_scale,       clip(x)                  = x /-Math.max/ -1 /-Math.min/ 1,
  epsilon = 2.220446049250313e-16,  infinity   = 1 / epsilon,  scaled_tan(x)  = Math.tan(clip(x) / atan_scale),  componentwise(f1, f2)(v) = [f1(v[0]), f2(v[1])],

  x_tangent          = capture [transform = componentwise(scaled_tan, "_".qf), inverse() = x_arctangent],  x_arctangent = capture [transform = componentwise(scaled_atan, "_".qf), inverse() = x_tangent],
  y_tangent          = capture [transform = componentwise("_".qf, scaled_tan), inverse() = y_arctangent],  y_arctangent = capture [transform = componentwise("_".qf, scaled_atan), inverse() = y_tangent],
  polar_to_cartesian = capture [transform(v, d = v[0],      t = v[1])                   = [d * Math.cos(t), d * Math.sin(t)], inverse() = cartesian_to_polar],
  cartesian_to_polar = capture [transform(v, d = v /!vnorm, t = Math.atan2(v[0], v[1])) = [d, (t + tau) % tau],               inverse() = polar_to_cartesian],

  bounding_box(b)    = capture [transform(v) = b /~intern/ v, inverse() = identity_transform],  identity_transform = capture [transform(v) = v, inverse() = this],

  // Arguments to composite() are ordered like composed functions: composite(t1, t2, t3).transform(x) = t1.transform(t2.transform(t3.transform(x)))
  composite(ts = arguments) = capture [transform(v) = ts /! [v] [x.transform(x0)] -seq,
                                       inverse()    = this.inverse_ -dcq- composite.apply(this, +ts *[xs[xl - xi - 1].inverse()] -seq) /se[it.inverse_ = this]],

Boxes and rectangles.
In Splunge terminology, a "box" is a region in space with no additional attributes, and a "rectangle" is a box with some data associated with it. In practice, the "rectangle" function is used to
represent a piece of chart data and the "box" function is used to represent data-less things like bounding boxes and transformation bounds. Boxes also support interpolation and are invertible linear
transformations.

  Representing data elements.
  Each data element is a rectangle or series of rectangles that can later be transformed into cartesian_to_polar coordinates to become arc slices. Each rectangle has arbitrary coordinates, though you'll probably want
  to use a layout function if you want to create a normal chart easily. For example, you can produce a one-ring pie chart by stacking rectangles of equal widths:

  | data = {foo: 3, bar: 5, bif: 2, baz: 6},
    element(k) = rectangle(k, [0, 0], [1, data[k]]),
    chart_objects = y_stack(data /keys *element -seq)

  The x_stack() and y_stack() functions translate and scale a series of rectangles into the range [0, 1] along whichever dimension you specify. The other dimension is unmodified.

  box_ctor = given[v, dv][this.v = v, this.dv = dv, null] -se- it.prototype /-$.merge/
             capture [area()            = Math.abs(this.dv[0] * this.dv[1]),    contains(v)  = v[0] >= this.v[0] && v[1] >= this.v[1] && v[0] <= this.v[0] + this.dv[0] && v[1] <= this.v[1] + this.dv[1],
                      interpolate(b, x) = this.scale(1 - x) /~plus/ b.scale(x), intersect(b) = this /~map_corners/ "b /~intern/ _".qf,
                      transform(v)      = this.v |-vplus| v /-vtimes/ this.dv,  union(b)     = box(c1, c2 /-vminus/ c1) -where [c1 = this.v                  |-vmin| b.v,
                                                                                                                                c2 = this.v /-vplus/ this.dv |-vmax| b.v /-vplus/ b.dv],

                      transform_v_with(t) = t.transform(this.v) /-box/ this.dv, transform_dv_with(t) = this.v /-box/ t.transform(this.dv),

                      children() = [],                                               toString()        = '[#{this.v[0]},#{this.v[1]} -> #{this.dv[0]},#{this.dv[1]}]',
                      intern(v)  = v |-vmax| this.v |-vmin| this.v /-vplus/ this.dv, map_corners(f)    = rectangle(this.data, c1, c2 /-vminus/ c1) -where [c1 = f(this.v), c2 = f(this.v /-vplus/ this.dv)],
                      plus(b)    = box(this.v /-vplus/ b.v, this.dv /-vplus/ b.dv),  transform_with(t) = this /~map_corners/ "t /~transform/ _".qf -se- it.untransformed_ /eq.this,
                      scale(x)   = box(this.v /-vscale/ x,  this.dv /-vscale/ x),    bound()           = this,
                      times(v)   = box(this.v, v /-vtimes/ this.dv),                 inverse()         = box([-this.v[0] / this.dv[0], -this.v[1] / this.dv[1]], [1 / this.dv[0], 1 / this.dv[1]])],

  box(v, dv)                             = new box_ctor(v, dv),       translate(v) = new box_ctor(v, [1, 1]),  bound_everything = box([-infinity, -infinity], [2 * infinity, 2 * infinity]),
  rectangle(data, v, dv, b = box(v, dv)) = b.data /eq.data -then- b,  scale(v)     = new box_ctor([0, 0], v),  bound_nothing    = box([        0,         0], [           0,            0]),

  x_stack(rs, h, x = 0, total = (h || 1) / (rs /[0][x0 + x.bound().dv[0]] -seq)) = rs *r[r.transform_with([x - r.bound().v[0], 0] /-box/ [1 / total, 1]) -se [x += r.bound().dv[0] / total]] -seq,
  y_stack(rs, h, y = 0, total = (h || 1) / (rs /[0][x0 + x.bound().dv[1]] -seq)) = rs *r[r.transform_with([0, y - r.bound().v[1]] /-box/ [1, 1 / total]) -se [y += r.bound().dv[1] / total]] -seq,

Infinite data sets.
You can render and interact with infinite data sets provided that you specify some limit on what gets rendered. Usually this involves either things being out of bounds or things being too small to be
visible. In either case, you need a way to infer properties of some elements from properties of others; generally this means using a hierarchy and some kind of induction against that hierarchy. For this
library we use the bound-nesting property.

  Laziness.
  Each data object must provide two methods, bound() and children(). bound() should return a bounding box, possibly infinite, and children() should synchronously return an array of children all of whose
  bounds are contained within the bounding box. You should call renderable() on the result to provide two more useful methods, transform_with() and interpolate(). These are derived from bound() and
  children().

  renderable(x)                    = x /-$.merge/ capture [interpolate(b, x) = bounded_interpolation(this, b, x),
                                                           transform_with(t) = capture [bound()    = b /~transform_with/ t,
                                                                                        children() = this.children_ -dcq- xs *[x /~transform_with/ t] /seq] /!renderable
                                                                                -where [b = this.bound(), xs = this.children()]],

  bounded(xs)                      = capture [bound() = bound, children() = xs] /!renderable -where [bound = xs *[x.bound()] /[x0 /~union/ x] -seq],

  scale_size(l, x, b = l.bound())  = l.transform_with(translate(b.v) / scale([x, x]) /-composite/ translate([-b.v[0], -b.v[1]])),
  bounded_interpolation(l1, l2, x) = x === 0 ? l1 : x === 1 ? l2 : l1 === l2 ? l1 : bounded([scale_size(l1, 1 - x), scale_size(l2, x)]),   // FIXME

  find_point(v, b)                 = b.bound() /~contains/ v ? b.children() |[find_point(v, x)] |seq || b : null,
  descend_while(f, x)              = x.children() *![descend_while(f, x)] -seq -when- f(x),

Rendering.
The most important/difficult aspect of rendering is drawing the paths that represent objects. These functions do that for you, at the same time using some optimizations to avoid rendering elements that
won't be visible. We can do this because of the way bounding boxes work: the bounding box of any given stack completely contains the bounding boxes of its children (except for certain cases involving
lazy data; see above). Under this assumption, we can stop rendering when the intersection between the bounding box and the view area is too small.

When this happens depends on the view transform. If something like the arctangent transformation is used, then all space is theoretically visible, but it will become arbitrarily small as the distance
from the focal point increases. Using a minimal-area heuristic is ideal for situations like this, and it also covers the usual clipping case. (See examples in test/)

The arc_path() function is coded strangely, but it needs to be this way. Here's the story. If you're using arc_path to render your data, then you're rendering data whose coordinates are specified in
polar form -- so your boxes are in the form [[rho, theta], [drho, dtheta]]. And if the user is going to interact with this meaningfully, you'll need to convert any mouse coordinates into polar form as
well, so one of the view transformations will be polar_to_cartesian so that you get the inverse cartesian_to_polar operating on the mouse coordinates.

Well, one of the side-effects of having a view transformation is that your data will be transformed prior to being rendered: so all of those polar coordinates our data used to have will be converted to
regular Cartesian coordinates via the polar_to_cartesian transform. However, the arc() method uses polar coordinates. So we undo the transformation right before rendering the arc. Note that this is a
hack that breaks some stuff; in particular, any transformations you make after polar_to_cartesian() must preserve the polar coordinates of those points; otherwise your arcs won't render properly (because
the transformation legitimately breaks the arcs, not due to a bug here).

  no_path(b)(c)                                              = null,
  rectangle_path(b)(c)                                       = c.beginPath() -then- c.rect(b.v[0], b.v[1], b.dv[0], b.dv[1]),
  arc_path(b, p = b /~transform_with/ cartesian_to_polar)(c) = c.beginPath() -then- c.arc(0, 0, p.v[0], p.v[1], p.v[1] + p.dv[1], true)
                                                                             -then- c.arc(0, 0, p.v[0] + p.dv[0], p.v[1] + p.dv[1], p.v[1]) -then- c.closePath(),

Canvas interaction.
This isn't a complete interaction layer, but it gives you some useful functions for common cases. In particular, these functions are focused on maintaining a "current view transformation" for the
<canvas> element and allowing the user to change it. Note that centered_in() takes just a regular <canvas> element, not a jQuery object.

  transformed_delta(t, v, tv = t.transform(v))(dv)                 = t.transform(v /-vplus/ dv) /-vminus/ tv,                                pan(b, dv)  = b /~transform_v_with/ translate(dv).inverse(),
  context_box(b)(c)                                                = c.translate(b.v[0], b.v[1]) -then- c.scale(b.dv[0], b.dv[1]) -then- c,  zoom(b, dv) = b /~transform_dv_with/ scale(dv).inverse(),
  centered_in(c, w = +c.width, h = +c.height, m = w /-Math.min/ h) = [w >> 1, h >> 1] /-box/ [m >> 1, m >> 1],

  chart_ctor = given[transform, path, area, view, slice, data][this.transform_ = transform, this.path_  = path,  this.area_ = area,
                                                               this.view_      = view,      this.slice_ = slice, this.data_ = data, null] -se- it.prototype /-$.merge/

               capture [slice(s, d, v)         = new this.constructor(this.transform_, this.path_, this.area_, v || this.view_, s || this.slice_, d || this.data_),
                        interpolate(c, x)      = this.slice(this.slice_.interpolate(c.slice_, x), this.data_.interpolate(c.data_, x), this.view_.interpolate(c.view_, x)),
                        transformed_data()     = this.data_ |~transform_with| this.transform_ /-composite/ this.slice_,
                        visible_data(f, limit) = descend_while("area_fn(_.bound()) > limit_area && f(_)".qf, where [area_fn = this.area_, limit_area = limit / this.view_.area()],
                                                               this.transformed_data()),

                        transform_context(c)   = context_box(this.view_)(c) -se [c.lineWidth /= this.view_.dv[0] /-Math.max/ this.view_.dv[1]],
                        transform()            = this.composite_transform_ -dcq- composite(this.view_, this.transform_, this.slice_),

                        with_context(c, f)     = c.save() -then- r /eq [f.call(this, this.transform_context(c))] -then- c.restore() -then- r -where [r = null],
                        render(f, limit)       = this.visible_data("_.children().length || f(p(_.bound()), _)".qf, limit || 1) -where [p = this.path_],
                        find(v)                = find_point(this.transform().inverse().transform(v), this.data_)],

  rectangular_chart(data, options, options = {} / rectangular_defaults /-$.merge/ options) = new chart_ctor(options.transform, rectangle_path, options.area, options.view, options.slice, data),
  radial_chart     (data, options, options = {} / radial_defaults      /-$.merge/ options) = new chart_ctor(options.transform, arc_path,       options.area, options.view, options.slice, data),

  polar_area(box, dr = box.dv[0]) = box.dv[1] * (2 * box.v[0] * dr + dr * dr) /!Math.abs,
  rectangular_defaults            = {transform: bounding_box([-1, -1] /-box/ [2, 2 - epsilon]) /-composite/ x_arctangent, slice: [1, 1] /!scale, area: "_.area()".qf},
  radial_defaults                 = {transform: polar_to_cartesian / box([0.5, 0], [0.5, tau - 0.001]) / bounding_box([-1, 0] /-box/ [2, 1]) /-composite/ x_arctangent,
                                     slice:     [1, 1] /!scale,
                                     area:      "_.transform_with(cartesian_to_polar) /!polar_area".qf}],
  using [caterwaul.numeric_offline_2]});
